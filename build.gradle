plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.escola.discovery'
version = '0.0.1-SNAPSHOT'

//java {
//	toolchain {
//		languageVersion = JavaLanguageVersion.of(21)
//	}
//}

repositories {
	mavenCentral()
	maven { url = 'https://repo.spring.io/snapshot' }
}

ext {
	set('springCloudVersion', "2025.0.0")
}

dependencies {
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}



/**
 * Para e remove os contêineres, redes e volumes definidos no docker-compose.yml.
 * Equivalente a: docker compose down
 */
tasks.register('dockerComposeDown', Exec) {
	group = 'Docker'
	description = 'Para e remove os contêineres do Docker Compose.'
	commandLine 'docker', 'compose', 'down'
}

/**
 * Executa 'docker compose down' e depois 'docker compose up -d --build'.
 * É a task principal para reiniciar todo o ambiente.
 */
tasks.register('dockerComposeRestart', Exec) {
	group = 'Docker'
	description = 'Reinicia o ambiente Docker Compose, forçando a reconstrução das imagens.'

	// Garante que a task 'dockerComposeDown' seja executada sempre antes desta.
	// A referência pelo nome da task funciona perfeitamente com o registro lazy.
	dependsOn 'dockerComposeDown'

	// Define o comando a ser executado.
	commandLine 'docker', 'compose', 'up', '-d', '--build'

	// Garante que a task sempre execute, ignorando o cache "UP-TO-DATE" do Gradle.
	outputs.upToDateWhen { false }
}

tasks.register('dockerComposeReload', Exec) {
	group = 'Docker'
	description = 'Reinicia um serviço específico ou todos os serviços.'

	outputs.upToDateWhen { false }

	doFirst {
		def command = ['docker', 'compose', 'restart']
		// Se a propriedade 'service' foi fornecida, adicione-a ao comando
		if (project.hasProperty('service')) {
			command.add(project.property('service'))
		}
		// Define a linha de comando final
		commandLine command
	}
}